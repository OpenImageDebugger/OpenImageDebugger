# The MIT License (MIT)

# Copyright (c) 2015-2025 OpenImageDebugger contributors
# (https://github.com/OpenImageDebugger/OpenImageDebugger)

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

name: Build

on:
  pull_request:
  workflow_call:

jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        os:
          [
            ubuntu-22.04,
            ubuntu-24.04,
            macos-14,
            macos-15,
          ]
        ccache-variant: [ccache]
        include:
          - os: ubuntu-22.04
            container: ghcr.io/openimagedebugger/oid:22.04
          - os: ubuntu-24.04
            container: ghcr.io/openimagedebugger/oid:24.04
          - os: windows-2022
            ccache-variant: "sccache"
          - os: windows-2025
            ccache-variant: "sccache"
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2
        with:
          fetch-depth: 1
          fetch-tags: true
          submodules: "recursive"
          # see https://github.com/orgs/community/discussions/25702#discussioncomment-6313966
          persist-credentials: false

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # 1.2.18
        with:
          verbose: 1
          key: ${{matrix.os}}-${{github.ref_name}}
          restore-keys: |
            ${{matrix.os}}-main
          append-timestamp: true
          variant: ${{ matrix.ccache-variant }}

      # Needed for ninja to work with msvc
      - if: contains(matrix.os, 'windows')
        name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # 1.13.0

      - if: contains(matrix.os, 'windows')
        name: Install Qt (Windows)
        uses: jurplel/install-qt-action@d325aaf2a8baeeda41ad0b5d39f84a6af9bcf005 # 4.3.0
        with:
          version: "5.15.2"
          aqtversion: "==3.1.*"
          setup-python: false
          cache: true

      - if: contains(matrix.os, 'macos')
        name: Install Qt (macOS)
        run: |
          brew install qt@5
          echo "PATH=/opt/homebrew/opt/qt@5/bin:$PATH" >> "$GITHUB_ENV"

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # 5.6.0
        with:
          python-version: 3.x

      - name: Setup Conan
        id: setup_conan
        uses: conan-io/setup-conan@434f093a557d1ee6972c4ed78693c3191653537b # 1.1.0

      # - if: contains(matrix.os, 'ubuntu')
      #   name: Install pipx (ubuntu)
      #   run: |
      #     apt update && apt install -y pipx
      #     pipx ensurepath
      #     echo "PATH=/github/home/.local/bin:$PATH" >> "$GITHUB_ENV"

      # - name: Setup conan
      #   run: |
      #     pipx install conan
      #     conan profile detect --force

      # - if: true
      #   shell: bash
      #   name: Get Conan home
      #   id: get_conan_home
      #   run: echo "conan_home=$(conan config home)" >> $GITHUB_OUTPUT

      - name: Copy mingw conan profile
        run: |
          cp -v mingw-profile '${{ steps.setup_conan.outputs.conan-home }}\profiles'

      - name: Restore Conan cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # 4.2.3
        with:
          path: ${{ steps.setup_conan.outputs.conan-home }}
          key: conan-${{ matrix.os }}-${{ hashFiles('conanfile.txt', '.github/workflows/build.yml') }}
          restore-keys: |
            conan-${{ matrix.os }}-

      - if: contains(matrix.os, 'windows')
        name: Conan install (windows)
        shell: powershell
        run: |
          conan install . -pr=mingw-profile --output-folder=. --build=missing --update --settings=compiler.cppstd=17 --conf=tools.env.virtualenv:powershell=pwsh

      - if: ${{ !contains(matrix.os, 'windows') }}
        name: Conan install (unix)
        run: |
          conan install . --output-folder=. --build=missing --settings=compiler.cppstd=17 --settings=tools.cmake.cmaketoolchain:generator=Ninja

      - name: Save Conan cache
        uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # 4.2.3
        with:
          path: ${{ steps.setup_conan.outputs.conan-home }}
          key: conan-${{ matrix.os }}-${{ hashFiles('conanfile.txt', '.github/workflows/build.yml') }}

      - if: contains(matrix.os, 'windows')
        name: Build (windows)
        shell: bash
        env:
          CMAKE_C_COMPILER_LAUNCHER: ${{ matrix.ccache-variant }}
          CMAKE_CXX_COMPILER_LAUNCHER: ${{ matrix.ccache-variant }}
        run: |
          # chmod +x build\generators\conanbuild.ps1
          # build\generators\conanbuild.ps1
          #
          # echo "SHOWING PROTOBUF LIB DIR"
          # ls C:/Users/runneradmin/.conan2/p/proto0019175345864/p/lib
          # echo "SHOWING ABSEIL LIB DIR"
          # ls C:/Users/runneradmin/.conan2/p/absei5eb9410e442ac/p/lib
          cmake --version
          # cmake --preset conan-release -DCMAKE_INSTALL_PREFIX=out  #-GNinja
          ls -lah .
          ls -lah build
          ls -lah build/Release
          # ls -lah build/Release/generators
          cmake -S . -B build/Release -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=build/Release/generators/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=out -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
          # cmake -S . -B build -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=build/generators/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=out -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
          # cat build/CMakeCache.txt
          cmake --build build --target install

      - if: ${{ !contains(matrix.os, 'windows') }}
        name: Build (unix)
        shell: bash
        env:
          CMAKE_C_COMPILER_LAUNCHER: ${{ matrix.ccache-variant }}
          CMAKE_CXX_COMPILER_LAUNCHER: ${{ matrix.ccache-variant }}
        # see https://stackoverflow.com/a/24470998/5843895 and https://cliutils.gitlab.io/modern-cmake/chapters/intro/running.html
        run: |
          # source build/Release/generators/conanbuild.sh
          # cmake --preset conan-release -DCMAKE_INSTALL_PREFIX=out -G "Ninja"
          # cmake --build build --preset conan-release --target install
          # cmake -S . -B build/Release -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=build/Release/generators/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=out
          cmake -S . -B build/Release -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=build/Release/generators/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=out -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
          # cmake -S . -B build/Release -DCMAKE_TOOLCHAIN_FILE=build/generators/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=out
          # cd build/Release
          # ninja install
          cmake --build build/Release --target install

      - name: Tar files
        shell: bash
        run: tar --strip-components 1 -cvf build-${{ matrix.os }}.tar out

      - name: Upload build
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # 4.6.2
        with:
          name: build-${{ matrix.os }}
          path: build-${{ matrix.os }}.tar
